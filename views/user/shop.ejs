<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shop</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
<!-- Include SweetAlert2 CSS and JS -->

    <style>
        body {
            font-family: 'Poppins', Arial, sans-serif;
           background-color: #f1f1f1;
        }ul{
            font-size: 14px;
        }
        .sidebar {
            width: 220px;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 60px;
            background: #ffeef6;
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        }
        .sidebar h5 {
            color: #333;
            
        }
        .sidebar ul li a {
            text-decoration: none;
            color: black;
        }
        .main-content {
            margin-left: 240px;
            padding: 20px;
            margin-top: 60px;
        }
        .product-card {
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            position: relative;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        .sidebar {
    width: 220px;
    height: 100vh;
    position: fixed;
    left: 0;
    top: 60px;
    background: #f8f9fa; /* Light gray background */
    padding: 20px;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    overflow-y: auto; /* Add scroll if content overflows */
}

.sidebar h5 {
    color: #333;
    font-size: 16px; /* Increased font size */
    font-weight: 600; /* Bold font */
    margin-bottom: 15px; /* Added spacing */
}

.sidebar ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar ul li {
    margin-bottom: 10px; /* Added spacing between list items */
}

.sidebar ul li a {
    text-decoration: none;
    color: #333;
    display: block;
    padding: 8px 12px;
    border-radius: 5px;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.sidebar ul li a:hover {
    background-color: #ffb2f7; /* Purple background on hover */
    color: white; /* White text on hover */
}

.sidebar input[type="text"],
.sidebar select {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px; /* Added spacing */
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}

.sidebar input[type="text"]:focus,
.sidebar select:focus {
    border-color: #ffbdea; /* Purple border on focus */
    outline: none;
}
.sidebar ul li {
    display: flex; /* Use flexbox to align items */
    align-items: center; /* Vertically center the checkbox and text */
    margin-bottom: 10px; /* Spacing between list items */
}

.sidebar ul li input[type="checkbox"] {
    margin-right: 10px; /* Add spacing between checkbox and text */
}
.sidebar input[type="checkbox"] {
    margin-right: 8px; /* Added spacing between checkbox and text */
}

/* Scrollbar styling */
.sidebar::-webkit-scrollbar {
    width: 8px;
}

.sidebar::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.sidebar::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

.sidebar::-webkit-scrollbar-thumb:hover {
    background: #555;
}
        .product-card img {
            width: 100%;
            height: 120px;
            object-fit: contain;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
        }
        .wishlist {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 24px;
            color: #ff4757;
        }
        .wishlist:hover {
            color: #ff6b81; 
        }
        .price-container {
            font-size: 16px;
            margin: 10px 0;
        }
        .original-price {
    position: relative;
    color: #474747; 
    text-decoration: none; 
}

.original-price::after {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    width: 100%;
    height: 0.5px; 
    background: linear-gradient(to right, rgb(23, 23, 23), rgb(155, 255, 179));
    transform: translateY(-50%);
}
        .btn-dark {
            background-color: #6a11cb; 
            border: none;
            padding: 8px 16px;
            font-size: 14px;
            transition: background-color 0.3s ease;
        }
        .btn-dark:hover {
            background-color: #2575fc; 
        }
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .pagination a {
            padding: 8px 12px;
            margin: 0 5px;
            border: 1px solid #000;
            text-decoration: none;
            color: black;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        .pagination a.active {
            background-color: black;
            color: white;
        }
        .pagination a:hover {
            background-color: #6a11cb;
            color: white;
            border-color: #6a11cb;
        }
        .product-name {
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            font-size: 16px;
            color: #333;
            margin: 10px 0;
        }.btn{
            background-color: #ffd3e6 !important;
        }.btn:hover{
            background-color: #888 !important;
        }h5{
            font-size: 7px;
           font-weight: bold;
    color: #333;
        }
    </style>
</head> 
<body>
<%- include('../partials/header') %>
<div class="sidebar">
    <h5>Search</h5>
    <input type="text" id="search-box" class="form-control" placeholder="Search books...">
    <h5>Filter by Genre</h5>
    <ul>
        <% for(let i=0; i<category.length; i++){ %>
            <li>
                <input type="checkbox" class="category-filter" value="<%= category[i].name %>">
                <a href="/filter?category=<%=category[i]._id%>" style="color: black; text-decoration-line: none; display: block;">
                    <%= category[i].name %>
                </a>
            </li>
        <% } %>
    </ul>
    <h5>Sort by Price</h5>
    <select id="price-sort" class="form-control">
        <option value="">Select</option> 
        <option value="low-high">Low to High</option>
        <option value="high-low">High to Low</option>
    </select>
    <h5>Filter by Price Range</h5>
    <select id="price-range" class="form-control">
        <option value="">Select</option>
        <option value="100-200">100 - 200</option>
        <option value="200-300">200 - 300</option>
        <option value="300-400">300 - 400</option>
        <option value="400-500">400 - 500</option>
    </select>
</div>

<div class="main-content">
    <div class="container mt-4">
        <div class="row row-cols-5" id="product-list">
            <% for(let i = 0; i < products.length; i++) { %>
                <div class="col mb-4 product-item" data-name="<%= products[i].productName.toLowerCase() %>" data-price="<%= products[i].salePrice %>" data-category="<%= category.find(cat => cat._id.toString() === products[i].category.toString())?.name || 'Unknown' %>">
                    <div class="product-card">
                        <a href="/productDetails?id=<%=products[i]._id%>">
                        <img class="image" src="/<%= products[i].productImage[0] %>" alt="<%= products[i].productName %>">
                        </a>
                        <h6 class="product-name"><%= products[i].productName %></h6>
                        <p>Genre: 
                            <%= category.find(cat => cat._id.toString() === products[i].category.toString())?.name || 'Unknown' %>
                        </p>
                        <p class="price-container">
                            Price: ₹<%= products[i].salePrice.toLocaleString('en-IN') %> 
                            <span class="original-price"> <s>Rs<%= products[i].regularPrice.toLocaleString('en-IN') %></s></span>
                        </p>
                                                
                        <div class="wishlist" onclick="addToWishlist('<%= products[i]._id %>', '<%= products[i].name %>', '<%= products[i].productImage[0] %>', '<%= products[i].category %>','<%= products[i].price %>')">❤️</div>
                       
                        <!-- <button class="btn" 
                        onclick="addToCart(
                            '<%= products[i]._id %>', 
                            '<%= products[i].salePrice || 0 %>', 
                            '<%= products[i].productImage.length > 0 ? products[i].productImage[0]:`/default.jpg` %>', 
                            '<%= category.find(cat => cat._id.toString() === products[i].category.toString())?.name || 'Unknown' %>'
                        )">
                        Add To Cart
                    </button>
                     -->
                        


                    </div>
                </div>
            <% } %>
        </div>
    </div>
</div>

<div class="pagination">
    <% if(currentPage > 1) { %>
        <a href="/shop?page=<%= currentPage - 1 %>&sort=<%= selectedSort %>&priceRange=<%= selectedPriceRange %>">Prev</a>
    <% } %>
    <% for(let i = 1; i <= totalPages; i++) { %>
        <a class="<%= currentPage === i ? 'active' : '' %>" href="/shop?page=<%= i %>&sort=<%= selectedSort %>&priceRange=<%= selectedPriceRange %>"><%= i %></a>
    <% } %>
    <% if(currentPage < totalPages) { %>
        <a href="/shop?page=<%= currentPage + 1 %>&sort=<%= selectedSort %>&priceRange=<%= selectedPriceRange %>">Next</a>
    <% } %>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // -------------------------------------------------------------------------------------------------------

  async function addToWishlist(productId, name, price, category, productImage) {
    const userId = "<%= userId %>";

    if (!userId) {
        Swal.fire({
            title: "Login Required",
            text: "You need to log in to add items to your wishlist.",
            icon: "warning",
            timer: 2000
        });
        return;
    }

    try {
        const response = await fetch('/wishlist/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, productId, name, price, category, productImage })
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                title: "Added to Wishlist",
                text: "Item has been added to your wishlist.",
                icon: "success",
                timer: 2000
            });
        } else if (response.status === 400 && data.message === "Product already in wishlist") {
         
            Swal.fire({
                title: "Already in Wishlist",
                text: "This product is already in your wishlist.",
                icon: "info",
                timer: 2000
            });
        } else {
            Swal.fire({
                title: "Error",
                text: data.message || "Failed to add item to wishlist",
                icon: "error",
                timer: 2000
            });
        }
    } catch (error) {
        console.error("Error adding to wishlist:", error);
        Swal.fire({
            title: "Error",
            text: "An error occurred while adding the product to the wishlist.",
            icon: "error",
            timer: 2000
        });
    }
}

// ------------------------------------------------------------------
async function addToCart(productId, price, image, category) {
    console.log("Attempting to Add to Cart:", { productId, price, image, category });

    const userId = "<%= userId %>";

  
    if (!userId || userId === "null") {
        Swal.fire({
            title: "Login Required",
            text: "Please log in to add items to your cart.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Login",
            cancelButtonText: "Cancel"
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = "/login";
            }
        });
        return;
    }

 
    if (price === undefined || price === null || price === "") {
        console.error(" Price is missing:", price);
        Swal.fire({
            title: "Error",
            text: "Product price is missing.",
            icon: "error"
        });
        return;
    }

 
    const sanitizedPrice = parseFloat(price.toString().replace(/,/g, ''));
    
    console.log("Sanitized Price:", sanitizedPrice);

  
    if (isNaN(sanitizedPrice) || sanitizedPrice <= 0) {
        console.error(" Invalid price detected:", price);
        Swal.fire({
            title: "Error",
            text: "Product price is invalid.",
            icon: "error"
        });
        return;
    }

    try {
      
        const response = await fetch('/add-to-cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                productId,
                quantity: 1,
                price: sanitizedPrice, 
                image,
                category
            })
        });

        const data = await response.json();
        console.log("Response from Cart:", data);

        if (response.ok) {
            Swal.fire({
                title: "Added to Cart!",
                text: "Product added to your cart.",
                icon: "success",
                showCancelButton: true,
                confirmButtonText: "Go to Cart",
                cancelButtonText: "Continue Shopping"
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/cart";
                }
            });

        } else {
            console.error("Error response:", data);
            Swal.fire({
                title: "Error",
                text: data.message || "Failed to add product to cart.",
                icon: "error",
                timer: 2000
            });
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            title: "Oops!",
            text: "Something went wrong. Please try again later.",
            icon: "error",
            timer: 2000
        });
    }
}

// -----------------------------------------------------------------------------------------------------


function updateProducts(page = 1) {
    const searchTerm = document.getElementById('search-box').value.toLowerCase();
    const selectedCategories = Array.from(document.querySelectorAll('.category-filter:checked')).map(cb => cb.value);
    const priceRange = document.getElementById('price-range').value;
    const sortOrder = document.getElementById('price-sort').value;

    const queryParams = new URLSearchParams();
    if (searchTerm) queryParams.set('search', searchTerm);
    if (selectedCategories.length > 0) queryParams.set('category', selectedCategories.join(','));
    if (priceRange) queryParams.set('priceRange', priceRange);
    if (sortOrder) queryParams.set('sort', sortOrder);
    queryParams.set('page', page);

    fetch(`/api/products?${queryParams.toString()}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const productList = document.getElementById('product-list');
                productList.innerHTML = '';

                data.products.forEach(product => {
                    const productItem = document.createElement('div');
                    productItem.className = 'col mb-4 product-item';
                    productItem.innerHTML = `
                        <div class="product-card">
                            <a href="/productDetails?id=${product._id}">
                                <img class="image" src="/${product.productImage[0]}" alt="${product.productName}">
                            </a>
                            <h6 class="product-name">${product.productName}</h6>
                            <p>Genre: ${product.category.name}</p>
                            <p class="price-container">
                                Price: ₹${product.salePrice.toLocaleString('en-IN')}
                                <span class="original-price"><s>₹${product.regularPrice.toLocaleString('en-IN')}</s></span>
                            </p>
                            
                            <div class="wishlist" id="wishlist-icon-${product._id}" onclick="addToWishlist('${product._id}')">❤️</div>
                        </div>
                    `;
                    productList.appendChild(productItem);
                });

                updatePagination(data.totalPages, page);
            } else {
                console.error("Failed to fetch products:", data.message);
            }
        })
        .catch(error => console.error("Error fetching products:", error));
}


 // -------------------------------------------------------------------------------------------------------

 function updatePagination(totalPages, currentPage) {
        const pagination = document.querySelector('.pagination');
        pagination.innerHTML = '';

        if (currentPage > 1) {
            const prevLink = document.createElement('a');
            prevLink.href = '#';
            prevLink.textContent = 'Prev';
            prevLink.addEventListener('click', () => {
                updateProducts(currentPage - 1);
            });
            pagination.appendChild(prevLink);
        }

        for (let i = 1; i <= totalPages; i++) {
            const pageLink = document.createElement('a');
            pageLink.href = '#';
            pageLink.textContent = i;
            pageLink.className = currentPage === i ? 'active' : '';
            pageLink.addEventListener('click', () => {
                updateProducts(i);
            });
            pagination.appendChild(pageLink);
        }

        if (currentPage < totalPages) {
            const nextLink = document.createElement('a');
            nextLink.href = '#';
            nextLink.textContent = 'Next';
            nextLink.addEventListener('click', () => {
                updateProducts(currentPage + 1);
            });
            pagination.appendChild(nextLink);
        }
    }

document.getElementById('search-box').addEventListener('input', () => updateProducts(1));
document.querySelectorAll('.category-filter').forEach(checkbox => checkbox.addEventListener('change', () => updateProducts(1)));
document.getElementById('price-range').addEventListener('change', () => updateProducts(1));
document.getElementById('price-sort').addEventListener('change', () => updateProducts(1));

updateProducts(1);


 // -------------------------------------------------------------------------------------------------------

    </script>
</body>
</html>