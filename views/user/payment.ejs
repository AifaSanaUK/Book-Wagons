<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* General Styles */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
            color: #333;
            height: 100vh; /* Full viewport height */
 
        }

        .container {
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
margin-bottom: 30px;
max-height:100vh ;
        
            background:#e0a800;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        h2, h3, h4 {
            color: #444;
            text-decoration: underline#e0a800;
        }

        h2 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 28px;
        }

        h3 {
            font-size: 22px;
            margin-bottom: 15px;
            color: #555;
        }

        h4 {
            font-size: 18px;
            margin-bottom: 10px;
            color: #666;
        }

        .order-summary, .payment-method {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .order-summary p, .delivery-address p {
            font-size: 16px;
            margin: 10px 0;
            color: #555;
        }

        .order-summary strong {
            color: #333;
        }

        .payment-method {
            text-align: center;
        }

        .payment-method button {
            background-color:#e0a800;;
            color: #fff;
            border: none;
            padding: 12px 24px;
            margin: 10px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .payment-method button:hover {
            background-color: #0056b3;
        }

        .delivery-address {
            background: #fff;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        #addressDetails {
            font-size: 16px;
            color: #555;
        }

.breadcrumbs {
    margin-bottom: 20px;
    font-size: 14px;
    margin-top: 15px;
    color: #777; /* Grey color for breadcrumbs */
}
.breadcrumbs a {
    text-decoration: none;
    margin-top: 25px;
    color: #777; /* Grey color for breadcrumbs */
}
.breadcrumbs a:hover {
    text-decoration: underline;
}
    </style>
</head>
<body>
    <div class="breadcrumbs">
        <a href="/">Home</a> &gt; 
        <a href="/shop">Shop</a> &gt; 
        <a href="/cart">Cart</a>&gt; 
        <a href="/checkout">Chekout</a>&gt; 
        <a href="/payment">Payment</a>
        <hr>
    </div>
    <br>

    <div class="container">
        <h2>Payment</h2>
      
       
<div class="order-summary">
    <h3>Order Summary</h3>
    
    <p><strong>Original Total:</strong> ₹<span id="originalTotal"><%= totalAmount %></span></p>
    <p><strong>Coupon Applied:</strong> <span id="couponApplied">None</span></p>
    <p><strong>Discount:</strong> ₹<span id="discountAmount">0</span></p>
    <p><strong>Delivery Charge:</strong> ₹<span id="deliveryCharge"><%= deliveryCharge %></span></p>
    <p><strong>Final Payable Amount:</strong> ₹<span id="finalPayable"><%= totalAmount %></span></p>
</div>

        
      
        <div class="payment-method">
        
            
            
            <h2>Choose Payment Method</h2>
<p><b>Final Payable Amount:</b> ₹<%= finalAmount %></p>

<h3>Delivery Address</h3>
<p><b><%= selectedAddress.name %></b></p>
<p><%= selectedAddress.addressLine %>, <%= selectedAddress.city %>, <%= selectedAddress.state %>, <%= selectedAddress.pincode %></p>
<p>Phone: <%= selectedAddress.phone %></p>
 
<button onclick="processPayment('razorpay')" class="btn btn-success">Pay Using Razorpay</button>
<button onclick="processPayment('cod')" class="btn btn-secondary">Cash on Delivery</button>
<button onclick="processPayment('wallet')" class="btn btn-warning">Wallet</button>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
// -------------------------------------------------------------------------------------------------------

async function processPayment(paymentMethod) {
    try {
        const paymentResponse = await fetch('/get-payment-data');
        const paymentData = await paymentResponse.json();

        if (!paymentResponse.ok || !paymentData.paymentData) {
            throw new Error(paymentData.message || "Failed to fetch payment data");
        }

        const { items, totalAmount, finalAmount, selectedAddress, userName, email, phone,deliveryCharge } = paymentData.paymentData;
        if (!selectedAddress) throw new Error("No address found in payment data.");

        if (paymentMethod === 'razorpay') {
            await initiateRazorpay(finalAmount, userName, email, phone, selectedAddress._id);
        } else {
            const response = await fetch("/place-order", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    items,
                    totalAmount,
                    finalAmount,
                    paymentMethod,
                    deliveryCharge,
                    selectedAddressId: selectedAddress._id,
                }),
            });

            const data = await response.json();
            if (data.success) {
                window.location.href = `/order-success?userName=${encodeURIComponent(data.userName)}&orderId=${data.orderId}`;
            } else {
                Swal.fire("Error", data.message || "Order placement failed. Try again!", "error");
            }
        }
    } catch (error) {
        Swal.fire("Error", error.message || "Something went wrong!", "error");
    }
}

// -----------------------------------------------------------------------------------------------------------------------------------------------------------------
async function initiateRazorpay(finalAmount, userName, email, phone, selectedAddressId) {
    try {
        console.log(" Initiating Razorpay...");

const orderResponse = await fetch("/payment/create-order", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ 
        amount: finalAmount,
        selectedAddressId: selectedAddressId 
    })
});


        const responseText = await orderResponse.text();
        console.log(" Create Order Response Text:", responseText);

        const orderData = JSON.parse(responseText);

        if (!orderData.success) {
            throw new Error(orderData.message || "Failed to create Razorpay order");
        }

        const { orderId, amount, currency } = orderData;

     
        const options = {
            key: "rzp_test_SroBuwgmVAck3g", 
            amount: amount, 
            currency: currency,
            name: "BookStore",
            description: "Order Payment",
            order_id: orderId,
            handler: async function (response) {
                console.log(" Payment Successful:", response);

                const verifyResponse = await fetch("/payment/verify-payment", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                        paymentMethod: "Razorpay",
                        selectedAddressId: selectedAddressId
                    })
                });

                const verifyData = await verifyResponse.json();
                if (verifyData.success) {
                    window.location.href = `/order-success?userName=${encodeURIComponent(verifyData.userName)}&orderId=${verifyData.orderId}`;
                } else {
                    Swal.fire("Error", " Payment verification failed!", "error");
                }
            },
            prefill: {
                name: userName,
                email: email,
                contact: phone,
            },
            notes: {
                address: "BookStore Payment",
            },
            theme: {
                color: "#3399cc",
            },
        };

        const razorpay = new Razorpay(options);

       
        razorpay.on('payment.failed', function (response) {
            console.error(" Payment Failed:", response.error);
            Swal.fire("Error", `Payment Failed: ${response.error.description}`, "error");

         
            fetch('/payment/payment-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    error: response.error,
                    paymentMethod: "Razorpay",
                    selectedAddressId: selectedAddressId
                })
            })
            .then(() => {
               
                window.location.href = `/payment/order-failure?orderId=${orderId}`; 

            })
            .catch(err => {
                console.error(" Failed to send error data:", err);
            });
        });

       
        razorpay.open();

    } catch (error) {
        console.error(" Error initiating Razorpay:", error);
        Swal.fire("Error", error.message, "error");
    }

}
// -------------------------------------------------------------------------------------------------------

async function fetchPaymentData() {
    try {
        const response = await fetch('/get-payment-data');
        const data = await response.json();

        if (!response.ok || !data.paymentData) {
            throw new Error(data.message || "Payment data is missing");
        }

        console.log("Fetched Payment Data:", data.paymentData);

        document.getElementById("originalTotal").innerText = data.paymentData.totalAmount.toFixed(2);
        document.getElementById("finalPayable").innerText = data.paymentData.finalAmount.toFixed(2);

        document.getElementById("discountAmount").innerText = data.paymentData.discount.toFixed(2);
        document.getElementById("couponApplied").innerText = data.paymentData.coupon || "None";
        document.getElementById("deliveryCharge").innerText = data.paymentData.deliveryCharge.toFixed(2);
    } catch (error) {
        console.error("Error fetching payment data:", error);
        Swal.fire("Error", "Failed to load payment details. Please try again.", "error");
    }
}
fetchPaymentData();

// -------------------------------------------------------------------------------------------------------


document.addEventListener("DOMContentLoaded", fetchPaymentData);
</script>


</body>
</html>