<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* General Styles */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7fa;
            margin: 0;
            padding: 0;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 20px;
            display: flex;
            gap: 20px;
        }

        .box {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            flex: 1;
        }

        h2, h3 {
            color: #444;
        }

        h2 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 28px;
        }

        h3 {
            font-size: 22px;
            margin-bottom: 15px;
            color: #555;
        }

        p {
            margin: 10px 0;
            font-size: 16px;
            color: #555;
        }

        .btn {
            display: block;
            width: 100%;
            padding: 12px;
            background:#e0a800;;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background: #0056b3;
        }

        .address-box {
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            margin-bottom: 10px;
            background: #f9f9f9;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .address-box input[type="radio"] {
            margin-right: 10px;
        }

        .edit-btn, .delete-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            margin-left: 10px;
        }

        .edit-btn {
            color: #007bff;
        }

        .edit-btn:hover {
            color: #0056b3;
        }

        .delete-btn {
            color: #ff4444;
        }

        .delete-btn:hover {
            color: #cc0000;
        }

        .coupon-box {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .coupon-box input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .coupon-box button {
            padding: 10px 20px;
        
          background:#e0a800;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

        .coupon-box button:hover {
            background: #0056b3;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            width: 400px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .modal-content h3 {
            margin-top: 0;
            color: #333;
        }

        .modal-content input {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .modal-content button[type="submit"] {
            width: 100%;
            padding: 10px;
            background: #e0a800;;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .modal-content button[type="submit"]:hover {
            background: #0056b3;
        }

        .close {
            float: right;
            font-size: 24px;
            cursor: pointer;
            color: #888;
        }

        .close:hover {
            color: #333;
        }

        .breadcrumbs {
            margin-bottom: 20px;
            font-size: 15px;
            color: #777;
            margin-top: 30px;
        }

        .breadcrumbs a {
            text-decoration: none;
            color: #777;
        }

        .breadcrumbs a:hover {
            text-decoration: underline;
        }

        .product-item {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 5px;
        }

        .product-info {
            flex-grow: 1;
        }

        .product-info p {
            margin: 5px 0;
        }h2{
          
        
          text-decoration: underline #e0a800  ;
        }   

        .apply-btn {
        background-color: #4c4e4c;
        color: white;
        padding: 8px;
        font-size: 13px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        margin-left: 10px;
    }

    .apply-btn:hover {
        background-color: #45a049;
    }

    .remove-btn {
        background-color: red;
        color: white;
        padding: 8px 16px;
        font-size: 13px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        margin-left: 10px;
    }

   
    </style>
</head>
<body>
  
    <div class="breadcrumbs">
        <a href="/">Home</a> &gt; 
        <a href="/shop">Shop</a> &gt; 
        <a href="/cart">Cart</a> &gt; 
        <a href="/checkout">Checkout</a>
        <hr>
    </div>

    <h2 style="text-align: center;">Checkout</h2>

    <div class="container">
   
        <div class="box">
            <h3>Order Summary</h3>
            <div id="checkoutItemsContainer">
              
            </div>
            <p>Total Items: <span id="checkoutTotalItems">0 Items</span></p>
            <p>Grand Total: <span id="checkoutTotalAmount">‚Çπ0</span></p>
          
<input type="hidden" id="totalAmount" value="<%= totalAmount %>">

            <p>Coupon Applied: <span id="couponApplied">None</span></p>
            
            <p>Discount: ‚Çπ<span id="discountAmount">0.00</span></p>
            <p><b>Final Payable Amount: <span id="finalPayableAmount">0</span></b></p>
        </div>

      
        <div class="box">
            <h3>Select Delivery Address</h3>
            <% if (addresses && addresses.length > 0) { %>
                <% addresses.forEach((address, index) => { %>
                    <div class="address-box">
                        <input type="radio" name="selectedAddress" value="<%= address._id %>" <% if(index === 0) { %>checked<% } %> >
                        <div>
                            <b><%= address.addressType %></b> <br>
                            <%= address.name %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %><br>
                            Landmark: <%= address.landMark %><br>
                            Phone: <%= address.phone %>, Alt: <%= address.altPhone %>
                        </div>
                        <button class="edit-btn" onclick="openEditModal('<%= address._id %>', '<%= address.addressType %>', '<%= address.name %>', '<%= address.city %>', '<%= address.landMark %>', '<%= address.state %>', '<%= address.pincode %>', '<%= address.phone %>', '<%= address.altPhone %>')">‚úèÔ∏è</button>
                        <button class="delete-btn" onclick="deleteAddress('<%= address._id %>')">üóëÔ∏è</button>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No addresses found. Please add a new address.</p>
            <% } %>
            <button class="btn" onclick="openAddModal()">+ Add New Address</button>

          
            <!-- <h3 style="margin-top: 20px;">Apply Coupon</h3>
<div class="coupon-box">
    <input type="text" id="couponCode" placeholder="Enter coupon code">
    <h3>Available Coupons</h3>
<ul id="couponList">
    <% coupons.forEach(coupon => { %>
        <li id="<%= coupon.name %>">
            <b><%= coupon.name %></b> - <%= coupon.offerPrice %> off 
            (Min Order: <%= coupon.minimumPrice %>) 
            <button class="coupon-btn" data-coupon="<%= coupon.name %>">Apply</button>
        </li>
    <% }) %>
</ul>
    
</div> -->

<!-- Coupon Modal Trigger -->
<!-- Coupon Modal Trigger -->
<button onclick="openCouponModal()" class="open-coupon-modal-btn" style="padding: 20px; margin-top: 20px; margin-left: 190px; font-size: 15px; border: none; color: white; background-color: #e0a800;">View Available Coupons</button>

<!-- Coupon Modal -->
<div id="couponModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeCouponModal()">&times;</span>
        <h3>Available Coupons</h3>
        <input type="text" id="couponSearch" placeholder="Search coupons...">
        <ul id="couponList">
            <% coupons.forEach(coupon => { %>
                <li id="<%= coupon.name %>">
                    <b><%= coupon.name %></b> - <%= coupon.offerPrice %> off 
                    (Min Order: <%= coupon.minimumPrice %>) 
                    <button class="apply-btn" data-coupon="<%= coupon.name %>">Apply</button>
                </li>
            <% }) %>
        </ul>
    </div>
</div>

        </div>
    </div>

 
    <div id="addAddressModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddModal()">&times;</span>
            <h3>Add New Address</h3>
            <form action="/add-address" method="POST">
                <input type="text" name="addressType" placeholder="Home/Office" required>
                <input type="text" name="name" placeholder="Full Name" required>
                <input type="text" name="city" placeholder="City" required>
                <input type="text" name="landMark" placeholder="Landmark" required>
                <input type="text" name="state" placeholder="State" required>
                <input type="number" name="pincode" placeholder="Pincode" required>
                <input type="text" name="phone" placeholder="Phone" required>
                <input type="text" name="altPhone" placeholder="Alternate Phone" required>
                <button type="submit">Add Address</button>
            </form>
        </div>
    </div>

    <div id="editAddressModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditModal()">&times;</span>
            <h3>Edit Address</h3>
            <form id="editAddressForm" method="POST" onsubmit="submitEditAddress(event)">
                <input type="hidden" id="editAddressId" name="addressId">
                <input type="text" id="editAddressType" name="addressType" placeholder="Home/Office" required>
                <input type="text" id="editName" name="name" placeholder="Full Name" required>
                <input type="text" id="editCity" name="city" placeholder="City" required>
                <input type="text" id="editLandmark" name="landMark" placeholder="Landmark" required>
                <input type="text" id="editState" name="state" placeholder="State" required>
                <input type="number" id="editPincode" name="pincode" placeholder="Pincode" required>
                <input type="text" id="editPhone" name="phone" placeholder="Phone" required>
                <input type="text" id="editAltPhone" name="altPhone" placeholder="Alternate Phone" required>
                <button type="submit">Update Address</button>
            </form>
        </div>
    </div>

 
    <div class="container">
        <button id="proceedToPayment" class="btn btn-primary">Proceed to Payment</button>
    </div>

    <script>

// ----------------------------------------------------------------------------------------------------------------------------------




function openCouponModal() {
    document.getElementById("couponModal").style.display = "flex";
}

function closeCouponModal() {
    document.getElementById("couponModal").style.display = "none";
}

let originalTotal = document.getElementById("totalAmount").value;
let finalTotal = originalTotal;
let discount = 0;
let appliedCoupon = null;

function toggleCoupon(couponName, button) {
    if (appliedCoupon && appliedCoupon !== couponName) {
        Swal.fire({
            icon: "warning",
            title: "Multiple Coupons Not Allowed",
            text: "Only one coupon can be applied per product.",
            timer: 2000,
            showConfirmButton: false
        });
        return;
    }
    if (appliedCoupon === couponName) {
        removeCoupon(button);
    } else {
        applyCoupon(couponName, button);
    }
}
// --------------------------------------------------------------------------------------------------------------------
function applyCoupon(couponName, button) {
    const totalAmount = document.getElementById("checkoutTotalAmount").innerText.replace("‚Çπ", "");

    fetch("/apply-coupon", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ coupon: couponName, totalAmount }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            discount = data.discount;
            finalTotal = data.finalAmount;
            appliedCoupon = couponName;

            Swal.fire({
                icon: "success",
                title: "Coupon Applied!",
                text: `Discount: ‚Çπ${data.discount}`,
                timer: 2000,
                showConfirmButton: false
            });

            document.getElementById("couponApplied").innerText = couponName;
            document.getElementById("discountAmount").innerText = data.discount;
            document.getElementById("finalPayableAmount").innerText = `‚Çπ${finalTotal}`;

            button.textContent = "Remove";
            button.className = "remove-btn";
            closeCouponModal();
        } else {
            Swal.fire({
                icon: "error",
                title: "Oops!",
                text: data.message,
                timer: 2000,
                showConfirmButton: false
            });
        }
    })
    .catch(err => console.error("Error applying coupon:", err));
}
// --------------------------------------------------------------------------------------------------------------------

function removeCoupon(button) {
    appliedCoupon = null;
    discount = 0;
    finalTotal = originalTotal;

    document.getElementById("couponApplied").innerText = "None";
    document.getElementById("discountAmount").innerText = "0.00";
    document.getElementById("finalPayableAmount").innerText = `‚Çπ${finalTotal}`;

    button.textContent = "Apply";
    button.className = "apply-btn";

    Swal.fire({
        icon: "success",
        title: "Coupon Removed!",
        text: "Coupon has been removed successfully.",
        timer: 2000,
        showConfirmButton: false,
    });

    setTimeout(() => {
        location.reload();
    }, 2000);
}
// --------------------------------------------------------------------------------------------------------------------

document.getElementById("couponSearch").addEventListener("input", function() {
    const searchTerm = this.value.toLowerCase();
    const coupons = document.querySelectorAll("#couponList li");

    coupons.forEach(coupon => {
        if (coupon.textContent.toLowerCase().includes(searchTerm)) {
            coupon.classList.add("search-highlight");
            coupon.style.display = "block";
        } else {
            coupon.classList.remove("search-highlight");
            coupon.style.display = "none";
        }
    });
});

document.querySelectorAll(".apply-btn, .remove-btn").forEach(button => {
    button.addEventListener("click", () => {
        const couponName = button.getAttribute("data-coupon");
        toggleCoupon(couponName, button);
    });
});


// --------------------------------------------------------------------------------------------------------------------

document.getElementById("proceedToPayment").addEventListener("click", async () => {
    const totalAmount = document.getElementById("checkoutTotalAmount").innerText.replace("‚Çπ", "");
    const selectedAddress = document.querySelector("input[name='selectedAddress']:checked");

    if (!selectedAddress) {
        alert("Please select a delivery address!");
        return;
    }
    const coupon = appliedCoupon || null;
    const addressId = selectedAddress.value;
    const cartItems = [];
    const discountAmount = discount || 0;

    document.querySelectorAll(".product-item").forEach(item => {
        const productId = item.dataset.productId; 
        const quantity = item.querySelector(".quantity").innerText.replace("Quantity: ", ""); 
        const price = item.querySelector(".price").innerText.replace("‚Çπ", ""); // Fix: Fetch price properly

        cartItems.push({ productId, quantity, price });
    });

    try {
        const response = await fetch("/proceed-to-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ totalAmount, addressId, items: cartItems,coupon , discount: discountAmount})
        });

        if (response.ok) {
            window.location.href = "/payment";
        } else {
            const data = await response.json();
            alert(`Failed to proceed to payment: ${data.message || "Unknown error"}`);
        }
    } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while processing the payment.");
    }
});

// ----------------------------------------------------------------------------------------------------------------------------------

let cartItems = []; 
async function loadCheckoutSummary() {
    const userId = "<%= userId %>"; 

    try {
        const response = await fetch(`/cart-summary/${userId}`);
        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "Failed to fetch cart summary");
        }

        document.getElementById("checkoutTotalAmount").innerText = `‚Çπ${data.totalAmount}`;
        document.getElementById("checkoutTotalItems").innerText = `${data.totalItems} Items`;
        document.getElementById("finalPayableAmount").innerText = `‚Çπ${data.totalAmount}`;

        const container = document.getElementById("checkoutItemsContainer");
        container.innerHTML = ""; 
        data.cartItems.forEach(item => {
            const productDiv = document.createElement("div");
            productDiv.classList.add("product-item");
            productDiv.dataset.productId = item.productId; 

            productDiv.innerHTML = `
                <img src="${item.image}" alt="${item.productName}" class="product-image">
                <div class="product-info">
                    <p><b>${item.productName}</b></p>
                    <p class="quantity">Quantity: ${item.quantity}</p>
                    <p class="price"> ‚Çπ${item.price}</p>
                </div>
            `;

            container.appendChild(productDiv);
        });

    
        cartItems = data.cartItems;

    } catch (error) {
        console.error("Error fetching cart summary:", error);
    }
}
document.addEventListener("DOMContentLoaded", loadCheckoutSummary);

// ----------------------------------------------------------------------------------------------------------------------------------
async function deleteAddress(addressId) {
    Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/delete-address/${addressId}`, {
                    method: "DELETE",
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire("Deleted!", "Address has been deleted.", "success");
                    location.reload();
                } else {
                    Swal.fire("Failed!", result.message, "error");
                }
            } catch (error) {
                console.error("Error:", error);
                Swal.fire("Error!", "Something went wrong.", "error");
            }
        }
    });
}
// ----------------------------------------------------------------------------------------------------------------------------------

function proceedToPayment() {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
       Swal.fire("Please select a delivery address.");
        return;
    }
    document.getElementById("proceedToPayment").click();
}

// ----------------------------------------------------------------------------------------------------------------------------------


function openEditModal(id, type, name, city, landmark, state, pincode, phone, altPhone) {
    document.getElementById("editAddressId").value = id;
    document.getElementById("editAddressType").value = type;
    document.getElementById("editName").value = name;
    document.getElementById("editCity").value = city;
    document.getElementById("editLandmark").value = landmark;
    document.getElementById("editState").value = state;
    document.getElementById("editPincode").value = pincode;
    document.getElementById("editPhone").value = phone;
    document.getElementById("editAltPhone").value = altPhone;

    document.getElementById("editAddressForm").action = "/edit-address/" + id;
    document.getElementById("editAddressModal").style.display = "flex";
}
function openAddModal() {
        document.getElementById("addAddressModal").style.display = "flex";
      }
function closeEditModal() {
    document.getElementById("editAddressModal").style.display = "none";
}

async function submitEditAddress(e) {
    e.preventDefault();

    const name = document.getElementById("editName").value.trim();
    const city = document.getElementById("editCity").value.trim();
    const landmark = document.getElementById("editLandmark").value.trim();
    const state = document.getElementById("editState").value.trim();
    const pincode = document.getElementById("editPincode").value.trim();
    const phone = document.getElementById("editPhone").value.trim();
    const altPhone = document.getElementById("editAltPhone").value.trim();

   
    if (!/^[A-Za-z ]{3,}$/.test(name)) {
        return Swal.fire("Invalid Name", "Name should be at least 3 alphabets.", "error");
    }

    if (!/^[A-Za-z ]{2,}$/.test(city)) {
        return Swal.fire("Invalid City", "City should contain only alphabets.", "error");
    }

    if (!/^[A-Za-z0-9 ]{3,}$/.test(landmark)) {
        return Swal.fire("Invalid Landmark", "Landmark should be valid.", "error");
    }

    if (!/^[A-Za-z ]{2,}$/.test(state)) {
        return Swal.fire("Invalid State", "State should contain only alphabets.", "error");
    }

    if (!/^[0-9]{6}$/.test(pincode)) {
        return Swal.fire("Invalid Pincode", "Pincode must be 6 digits.", "error");
    }

    if (!/^[0-9]{10}$/.test(phone)) {
        return Swal.fire("Invalid Phone", "Phone number must be 10 digits.", "error");
    }

    if (!/^[0-9]{10}$/.test(altPhone)) {
        return Swal.fire("Invalid Alternate Phone", "Alternate phone must be 10 digits.", "error");
    }

    if (phone === altPhone) {
        return Swal.fire("Invalid Input", "Phone and alternate phone should be different.", "error");
    }

    const addressId = document.getElementById("editAddressId").value;
    const formData = {
        addressType: document.getElementById("editAddressType").value.trim(),
        name, city, landmark, state, pincode, phone, altPhone
    };

    try {
        const response = await fetch(`/edit-address/${addressId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData),
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: "success",
                title: "Success",
                text: "Address updated successfully!",
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                closeEditModal();
                location.reload();
            });
        } else {
            Swal.fire("Error", result.message || "Failed to update address.", "error");
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire("Error", "Something went wrong. Please try again.", "error");
    }
}

// ----------------------------------------------------------------------------------------------------------------------------------

    </script>
</body>
</html>