<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>User Profile</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include SweetAlert2 CSS & JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap JS (Required for Dropdown) -->
    <style>
        body {
            background: url("/images/banner-image-bg.jpg") no-repeat center center fixed;
        }

        .container-fluid {
            display: flex;
        }

        .sidebar {
            width: 250px; /* Fixed width for sidebar */
            background: #ffeef6;
            color: rgb(77, 77, 77);
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            position: fixed; /* Fixed position */
            height: 100vh; /* Full height */
            overflow-y: auto; /* Scrollable if content overflows */
        }

        .sidebar h4 {
            font-size: 1.2rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
        }

        .sidebar a {
            color: rgb(77, 77, 77);
            text-decoration: none;
            display: block;
            padding: 10px;
            font-size: 1rem;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .sidebar a:hover {
            background-color: #f0f0f0;
        }
        .main-content {
            flex: 1;
            padding: 30px;
            margin-left: 220px; /* Adjust for sidebar width */
        }

        .profile-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }

        .profile-container h2 {
            margin-bottom: 20px;
        }

        .profile-info {
            margin-bottom: 15px;
        }

        .profile-info label {
            font-weight: bold;
        }

        .btn-edit {
            margin-top: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            width: 100%;
        }

        .btn {
            background-color: #ffb7d6;
            color: #777;
        }

        .sidebar button {
            width: 100%;
            margin-bottom: 10px;
        }

        .address-box {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            background-color: #f9f9f9;
        }

        .address-actions {
            margin-top: 10px;
            text-align: right;
        }

        .no-address {
            text-align: center;
            color: #777;
            font-style: italic;
        }

        #add {
            margin-left: 600px;
            margin-top: 150px;
        }

        .modal-content {
            width: 100%;
            max-width: 800px;
        }.address-box .card-header p {
    display: flex;
    justify-content: space-between; /* Aligns the label and detail to opposite ends */
    border-bottom: 1px solid #ddd; /* Adds a line between each detail */
    padding: 8px 0; /* Adds some padding for spacing */
    margin: 0; /* Removes default margin */
}

.address-box .card-header p:last-child {
    border-bottom: none; /* Removes the line from the last item */
}

.address-box .card-header .detail {
    text-align: right; /* Aligns the detail text to the right */
    flex: 1; /* Ensures the detail takes up the remaining space */
    margin-left: 10px; /* Adds some space between the label and detail */
}.address-box .card-header {
    display: flex;
    flex-direction: column;
    gap: 10px; /* Adds spacing between rows */
}

.address-row {
    display: flex;
    flex-wrap: wrap; /* Allows wrapping to the next line if space is insufficient */
    gap: 15px; /* Adds spacing between items */
}

.address-item {
    flex: 1 1 calc(25% - 15px); /* Adjusts the width of each item */
    display: flex;
    flex-direction: column;
    align-items: flex-start; /* Aligns text to the left */
    padding: 8px;
    border: 1px solid #ddd; /* Adds a border for better separation */
    border-radius: 4px; /* Rounded corners */
    background-color: #f9f9f9; /* Light background for each item */
}

.address-item strong {
    margin-bottom: 4px; /* Adds spacing between label and detail */
}

.address-actions {
    margin-top: 10px;
    text-align: right;
}
    </style>
</head>
<body>
<%- include('../partials/header') %>
<div class="container-fluid">
    <!-- Sidebar -->
    <div class="sidebar">
        <h4 class="text-center text-white">Dashboard</h4>
        <a href="/userProfile">Profile</a>
        <a href="/addressButton" id="addressLink">Address</a>
        <a href="/order">Order</a>
        <a href="/wallet">Wallet </a>
       
        <a href="/logoutt">Logout</a>
    </div>

    <div class="main-content">
        <button class="btn btn-success" id="add" onclick="window.location.href='/addAddress'">Add Address</button>

        <% if (userAddress && userAddress.address && userAddress.address.length > 0) { %>
            <% userAddress.address.forEach((address, index) => { %>
                <div class="address-box">
                    <div class="card-header">
                        <div class="address-row">
                            <div class="address-item">
                                <strong>Type:</strong> <span class="detail"><%= address.addressType %></span>
                            </div>
                            <div class="address-item">
                                <strong>Name:</strong> <span class="detail"><%= address.name %></span>
                            </div>
                            <div class="address-item">
                                <strong>City:</strong> <span class="detail"><%= address.city %></span>
                            </div>
                            <div class="address-item">
                                <strong>State:</strong> <span class="detail"><%= address.state %></span>
                            </div>
                            <div class="address-item">
                                <strong>Land Mark:</strong> <span class="detail"><%= address.landMark %></span>
                            </div>
                            <div class="address-item">
                                <strong>Phone Number:</strong> <span class="detail"><%= address.phone %></span>
                            </div>
                            <div class="address-item">
                                <strong>Alternate Number:</strong> <span class="detail"><%= address.altPhone %></span>
                            </div>
                            <div class="address-item">
                                <strong>Pincode:</strong> <span class="detail"><%= address.pincode %></span>
                            </div>
                        </div>
                        <div class="address-actions">
                            <button class="btn btn-primary" onclick="openEditModal('<%= address._id %>')">Edit</button>
                            <button class="btn btn-danger" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <p class="no-address">No addresses found. Please add an address.</p>
        <% } %>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAddressForm">
                    <input type="hidden" id="editAddressId">
                    <div class="mb-3">
                        <label for="editType" class="form-label">Address Type</label>
                        <input type="text" class="form-control" id="editType" required>
                    </div>
                    <div class="mb-3">
                        <label for="editName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editCity" class="form-label">City</label>
                        <input type="text" class="form-control" id="editCity" required>
                    </div>
                    <div class="mb-3">
                        <label for="editLandmark" class="form-label">Land Mark</label>
                        <input type="text" class="form-control" id="editLandmark" required>
                    </div>
                    <div class="mb-3">
                        <label for="editState" class="form-label">State</label>
                        <input type="text" class="form-control" id="editState" required>
                    </div>
                    <div class="mb-3">
                        <label for="editPincode" class="form-label">Pincode</label>
                        <input type="text" class="form-control" id="editPincode" pattern="\d{6}" title="Pincode must be exactly 6 digits" required>
                    </div>
                    <div class="mb-3">
                        <label for="editPhone" class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="editPhone" required>
                    </div>
                    <div class="mb-3">
                        <label for="editAltPhone" class="form-label">Alternate Number</label>
                        <input type="text" class="form-control" id="editAltPhone" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // ----------------------------------------------------------------------------------------------------------------------------------

    function openEditModal(addressId) {
        fetch(`/getAddress/${addressId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('editAddressId').value = addressId;
                    document.getElementById('editType').value = data.address.addressType;
                    document.getElementById('editName').value = data.address.name;
                    document.getElementById('editCity').value = data.address.city;
                    document.getElementById('editLandmark').value = data.address.landMark;
                    document.getElementById('editState').value = data.address.state;
                    document.getElementById('editPincode').value = data.address.pincode;
                    document.getElementById('editPhone').value = data.address.phone;
                    document.getElementById('editAltPhone').value = data.address.altPhone;

                    var editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
                    editModal.show();
                } else {
                    Swal.fire("Error", data.message, "error");
                }
            })
            .catch(error => {
                Swal.fire("Error", "Failed to fetch address data", "error");
            });
    }
// ----------------------------------------------------------------------------------------------------------------------------------

    document.getElementById('editAddressForm').addEventListener('submit', function(event) {
        event.preventDefault();
        const addressId = document.getElementById('editAddressId').value;
        const updatedAddress = {
            addressType: document.getElementById('editType').value,
            name: document.getElementById('editName').value,
            city: document.getElementById('editCity').value,
            landMark: document.getElementById('editLandmark').value,
            state: document.getElementById('editState').value,
            pincode: document.getElementById('editPincode').value,
            phone: document.getElementById('editPhone').value,
            altPhone: document.getElementById('editAltPhone').value
        };

        if (updatedAddress.phone === updatedAddress.altPhone) {
            Swal.fire("Error", "Phone and Alternate Phone must be different", "error");
            return;
        }
        const pincode = document.getElementById('editPincode').value;

// Validate Pincode
if (!/^\d{6}$/.test(pincode)) {
    Swal.fire("Error", "Pincode must be exactly 6 digits", "error");
    return;
}


        fetch(`/updateAddress/${addressId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedAddress)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire("Success", "Address updated successfully", "success")
                    .then(() => window.location.href = "/addressButton");
            } else {
                Swal.fire("Error", data.message, "error");
            }
        })
        .catch(error => {
            Swal.fire("Error", "Something went wrong!", "error");
        });
    });

    function deleteAddress(addressId) {
        Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete it!"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/deleteAddress/${addressId}`, {
                    method: "DELETE"
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire("Deleted!", "Your address has been deleted.", "success")
                            .then(() => window.location.href = "/addressButton");
                    } else {
                        Swal.fire("Error", data.message, "error");
                    }
                })
                .catch(error => {
                    Swal.fire("Error", "Something went wrong!", "error");
                });
            }
        });
    }
</script>
</body>
</html>