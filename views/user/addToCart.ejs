<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }.out-of-stock {
    color: red;
    font-weight: bold;
}.stock-warning {
    color: red;
    font-size: 14px;
    margin-top: 5px;
    font-weight: bold
}


        .breadcrumbs {
            margin-bottom: 20px;
            font-size: 14px;
            color: #777; /* Grey color for breadcrumbs */
        }
        .breadcrumbs a {
            text-decoration: none;
            color: #777; /* Grey color for breadcrumbs */
        }
        .breadcrumbs a:hover {
            text-decoration: underline;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            gap: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Box shadow for main container */
            padding: 20px;
        }
        .cart-container {
            flex: 2;
            background: white;
            border-radius: 8px;
        }
        .cart-container h2 {
            margin-top: 0;
            font-size: 24px;
            color: #333;
        }
        .cart-item {
            display: flex;
            align-items: center;
            gap: 20px;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
        }
        .cart-item:last-child {
            border-bottom: none;
        }
        .cart-item img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
        }
        .cart-item-details {
            flex: 1;
        }
        .cart-item h5 {
            margin: 0 0 10px;
            font-size: 18px;
            color: #333;
        }
        .cart-item p {
            margin: 5px 0;
            color: #555;
        }
        .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .quantity-control button {
            background:#e0a800;;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .quantity-control button:hover {
            background:#e0a800;;
        }
        .quantity-control input {
            width: 50px;
            text-align: center;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .cart-item .wishlist-btn, .cart-item .remove-btn {
            background: #ffc107;
            color: black;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-left: 10px; /* Add space between buttons */
        }
        .cart-item .wishlist-btn:hover, .cart-item .remove-btn:hover {
            background: #e0a800;
        }
        .cart-item-actions {
            display: flex;
            align-items: center;
            margin-left: auto; /* Align buttons to the right */
        }
        .checkout-box {
            flex: 1;
            margin-top: 120px;
            height: 300px;
            max-width: 300px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            margin-left: auto;
        }
        .checkout-box h4 {
            margin: 0 0 15px;
            font-size: 20px;
            color: #333;
        }
        .checkout-box p {
            margin: 10px 0;
            font-size: 18px;
            color: #555;
        }
        .checkout-box button {
            background: #ffc107;
            color: black;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            width: 100%;
            font-size: 16px;
            cursor: pointer;
        }
        .checkout-box button:hover {
            background: #e0a800;
        }
        h2 {
            margin-left: 520px;
            text-decoration: underline #e0a800;;

        }
    </style>
</head>
<body>

    <div class="breadcrumbs">
        <a href="/">Home</a> &gt; 
        <a href="/shop">Shop</a> &gt; 
        <a href="/cart">Cart</a>
        <hr>
    </div>
    <br>

    <div class="container">
        <div class="cart-container">
            <h2>Your Cart</h2>
            <div id="cart"></div>
        </div>

        <div class="checkout-box">
            <h4>Order Summary</h4>
            <p>Total Items: <span id="totalItems">0</span></p>
            <p>Grand Total: ₹<span id="grandTotal">0</span></p>
            <a href="/checkout">
                <button class="btn btn-primary">Proceed to Checkout</button>
            </a>
            
        </div>
    </div>

    <script>


// ----------------------------------------------------------------------------------------------------------------------------------

async function renderCart() {
    const userId = "<%= userId %>";
    try {
        const response = await fetch(`/get-cart/${userId}`);
        const data = await response.json();
        const cartContainer = document.getElementById("cart");
        let totalAmount = 0;
        let totalItems = 0;
        let hasOutOfStock = false;

        if (!response.ok) throw new Error(data.message || 'Failed to fetch cart items');
        cartContainer.innerHTML = '';

        data.cart.items.forEach(item => {
            totalAmount += item.price * item.quantity;
            totalItems += item.quantity;
            const isOutOfStock = item.quantity > item.productId.quantity; 

            if (isOutOfStock) hasOutOfStock = true; 

            const cartItem = document.createElement("div");
            cartItem.classList.add("cart-item");
            cartItem.innerHTML = `
                <img src="/${item.image}" alt="${item.productId.productName}">
                <div class="cart-item-details">
                    <h5>${item.productId.productName}</h5>
                    <p>Category: ${item.productId.category ? item.productId.category.name : 'N/A'}</p>
                    <p>Price: ₹${item.price}</p>
                    <div class="quantity-control">
                        <button onclick="updateQuantity('${item.productId._id}', ${item.quantity - 1})">-</button>
                        <input type="number" min="1" value="${item.quantity}" readonly>
                        <button onclick="updateQuantity('${item.productId._id}', ${item.quantity + 1})">+</button>
                        <p id="stock-warning-${item.productId._id}" class="stock-warning" style="color: red; display: ${isOutOfStock ? 'block' : 'none'}">
                            ${isOutOfStock ? 'Out of Stock!' : ''}
                        </p>
                    </div>
                    <p>Total: ₹${item.price * item.quantity}</p>
                </div>
                <div class="cart-item-actions">
                    <button class="wishlist-btn" onclick="moveToWishlist('${item.productId._id}')" ${isOutOfStock ? 'disabled' : ''}>Add to Wishlist</button>
                    <button class="remove-btn" onclick="removeFromCart('${item.productId._id}')">Remove</button>
                </div>
            `;
            cartContainer.appendChild(cartItem);
        });

        document.getElementById("grandTotal").innerText = totalAmount;
        document.getElementById("totalItems").innerText = totalItems;
        const checkoutButton = document.querySelector(".checkout-box button");
        if (totalItems === 0 || hasOutOfStock) {
            checkoutButton.disabled = true;
            checkoutButton.innerText = totalItems === 0 ? "Your cart is empty!" : "Some items are out of stock!";
            checkoutButton.style.backgroundColor = "gray";
        } else {
            checkoutButton.disabled = false;
            checkoutButton.innerText = "Proceed to Checkout";
            checkoutButton.style.backgroundColor = "";
        }

    } catch (error) {
        console.error('Error fetching cart items:', error);
    }
}

// ----------------------------------------------------------------------------------------------------------------------------------

async function updateQuantity(productId, newQuantity) {
    const userId = "<%= userId %>";
    const stockWarning = document.querySelector(`#stock-warning-${productId}`);

    try {
  
        if (newQuantity < 1) {
            Swal.fire({
                title: "Invalid Quantity",
                text: "Quantity cannot be less than 1.",
                icon: "error",
            });
            return;
        }

        
        const response = await fetch(`/get-product/${productId}`);
        const productData = await response.json();

        if (!response.ok || !productData.product || productData.product.quantity === undefined) {
            console.error("Error fetching product data.");
            Swal.fire({
                title: "Stock Error",
                text: "Error checking stock. Try again.",
                icon: "error",
            });
            return;
        }

        const maxQuantity = productData.product.quantity;
        console.log(`Available stock: ${maxQuantity}, Requested: ${newQuantity}`);

        if (newQuantity > maxQuantity) {
            stockWarning.style.display = "block"; 
            stockWarning.innerText = `Only ${maxQuantity} left in stock!`;
            return;
        } else {
            stockWarning.style.display = "none"; 
        }

   
        const updateResponse = await fetch('/update-cart-item', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, productId, quantity: newQuantity })
        });

        const updateResult = await updateResponse.json();

        if (!updateResult.success) {
            Swal.fire({
                title: "Update Failed",
                text: updateResult.message,
                icon: "error",
            });
            return;
        }

        renderCart(); 

    } catch (error) {
        console.error('Error updating quantity:', error);
        Swal.fire({
            title: "Oops!",
            text: "Something went wrong while updating quantity.",
            icon: "error",
        });
    }
}
// ----------------------------------------------------------------------------------------------------------------------------------
        async function removeFromCart(productId) {
            const userId = "<%= userId %>";
            try {
                const response = await fetch('/remove-from-cart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, productId })
                });
                if (response.ok) renderCart();
            } catch (error) {
                console.error('Error removing from cart:', error);
            }
        }

// ----------------------------------------------------------------------------------------------------------------------------------

        async function moveToWishlist(productId) {
    try {
        const response = await fetch('/wishlist/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                title: "Added to Wishlist!",
                text: "Product moved successfully.",
                icon: "success",
                timer: 2000
            });

            renderCart(); 
        } else {
            Swal.fire({
                title: "Error",
                text: data.message || "Failed to move product to wishlist.",
                icon: "error"
            });
        }
    } catch (error) {
        console.error('Error moving to wishlist:', error);
        Swal.fire({
            title: "Oops!",
            text: "Something went wrong.",
            icon: "error"
        });
    }
}

// ----------------------------------------------------------------------------------------------------------------------------------

        document.addEventListener("DOMContentLoaded", renderCart);
    </script>
</body>
</html>